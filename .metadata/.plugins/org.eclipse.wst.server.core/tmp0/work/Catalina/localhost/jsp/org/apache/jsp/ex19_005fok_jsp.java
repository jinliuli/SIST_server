/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-20 07:13:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;

public final class ex19_005fok_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");
	
	/*  
		<form enctype="multipart/form-data">
		- request.getParameter() > 동작 불가능	
		- request.getParameterValues() > 동작 불가능	
		
		
		cos.jar
		- webapp > WEB-INF > lib 폴더에 붙여넣기하면 jar파일을 자동으로 빌드패스해줌
		- MultipartRequest 클래스 > 기존의 request를 대신한다.
		1. 기존의 request 객체를 Wrapping 한 객체
			- getParameter() 동작 가능
		2. 파일 업로드 처리
		
		
	*/

	//String txt = request.getParameter("txt");
	//String num = request.getParameter("num");
	
	String txt = "";
	String num = "";
	String filename = "";
	String orgfilename = "";
	
	
	//1. 업로드된 파일을 저장할 경로 > 로컬 경로 사용(C:\)
	//- webapp > files
	//String path = "C:\\class\\code\\server\\JSPTest\\src\\main\\webapp\\flies";
	
	//실제 경로?
	//String path = "C:\\files"
	String path = application.getRealPath("/files");
	System.out.println(path);
	
	
	//2. 업로드 파일의 최대 크기 지정
	//- 바이트 단위
	int size = 1024 * 1024 * 100; //100MB
	
	try {
		
		//3. MultipartRequest 객체 생성
		//- 파일업로드 완료
		MultipartRequest multi = new MultipartRequest(
								request,	//기존의 request
								path,		//업로드 위치
								size,		//최대크기
								"UTF-8",	//인코딩
								new DefaultFileRenamePolicy()
								);
		
		//텍스트 데이터
		txt = multi.getParameter("txt");
		num = multi.getParameter("num");
		
		//첨부 파일명
		//- <input type="file" name="attach">
		filename = multi.getFilesystemName("attach");
		
		orgfilename = multi.getOriginalFileName("attach");
		
		
	} catch (Exception e) {
		e.printStackTrace();
	}
	

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<title></title>\r\n");
      out.write("	<link rel=\"stylesheet\" href=\"http://bit.ly/3WJ5ilK\">\r\n");
      out.write("	<style>\r\n");
      out.write("	\r\n");
      out.write("	</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<!-- ex19_ok.jsp -->\r\n");
      out.write("	<h1>결과</h1>\r\n");
      out.write("	\r\n");
      out.write("	<div>\r\n");
      out.write("		문자: ");
      out.print( txt );
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div>\r\n");
      out.write("		숫자: ");
      out.print( num );
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div>\r\n");
      out.write("		파일명: ");
      out.print( filename );
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div>\r\n");
      out.write("		파일명: ");
      out.print( orgfilename );
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<hr>\r\n");
      out.write("	\r\n");
      out.write("	<h2>파일 다운로드</h2>\r\n");
      out.write("	\r\n");
      out.write("	<!-- \r\n");
      out.write("		장점: 단순함\r\n");
      out.write("		단점: 브라우저가 실행 가능한 포맷의 파일을 직접 실행한다.\r\n");
      out.write("			  파일명이 원본과 다를 수 있다.\r\n");
      out.write("	-->\r\n");
      out.write("	\r\n");
      out.write("	<div>\r\n");
      out.write("		<a href=\"/jsp/files/");
      out.print( filename );
      out.write('"');
      out.write('>');
      out.print( orgfilename );
      out.write("</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<!-- \r\n");
      out.write("		장점: 간단함. 모든 파일을 다운로드\r\n");
      out.write("		단점: 파일명이 원본과 다를 수 있다.\r\n");
      out.write("	-->\r\n");
      out.write("	\r\n");
      out.write("	<div>\r\n");
      out.write("		<a href=\"/jsp/files/");
      out.print( filename );
      out.write("\" download>");
      out.print( orgfilename );
      out.write("</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<!--  \r\n");
      out.write("		장점: 평범한 다운로드를 제공(모든 파일 다운로드, 이름 원본 유지)\r\n");
      out.write("		단점: download.jsp 작성 비용 발생\r\n");
      out.write("	-->\r\n");
      out.write("	\r\n");
      out.write("	<div>\r\n");
      out.write("		<a href=\"download.jsp?filename=");
      out.print( filename);
      out.write("&orgfilename=");
      out.print( orgfilename );
      out.write('"');
      out.write('>');
      out.print( orgfilename );
      out.write("</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<hr>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<div>\r\n");
      out.write("		<a href=\"ex18_session.jsp\" download>18번 예제</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-3.7.1.js\"></script>\r\n");
      out.write("	<script src=\"https://bit.ly/4cMuheh\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("	\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
